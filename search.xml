<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apollo基础介绍</title>
    <url>/2020/03/22/apollo-1/</url>
    <content><![CDATA[<p>之前学习的笔记整理的太乱，而且被我落在了学校，抱着温故而知新的想法，所以把Apollo的基础知识重新学习，再在博客上整理一遍，也方便自己日后查阅。</p>
<blockquote>
<p>注：内容均来自 Apollo开发者社区，感谢百度Apollo团队的各位大佬。</p>
</blockquote>
<a id="more"></a>

<h1 id="无人驾驶概览"><a href="#无人驾驶概览" class="headerlink" title="无人驾驶概览"></a>无人驾驶概览</h1><h2 id="什么是无人驾驶"><a href="#什么是无人驾驶" class="headerlink" title="什么是无人驾驶"></a>什么是无人驾驶</h2><p>根据SAE将自动驾驶分为0-5共6个等级。L0为基本等级，其中人类驾驶员为唯一决策者，控制所有的油门刹车等系统；L1为驾驶员辅助，提供转向加速等辅助功能，驾驶员充分参与；L2是部分自动化，自动控制数项功能，如ACC；L3是有条件自动化，车辆自动驾驶，必要时接管；L4高度自动化，车辆控制所有方面，不希望人类参与，一般被限制在地理围栏内；L5完全自动化，车辆完全自动驾驶，在任何地方。</p>
<p>自动驾驶始于20世纪80年代。2009年谷歌成立自动驾驶部门。2017年百度公布Apollo自动驾驶开源平台。</p>
<h2 id="开源软件架构"><a href="#开源软件架构" class="headerlink" title="开源软件架构"></a>开源软件架构</h2><p>Apollo开源软件架构分为三层：实时操作系统(RTOS)、运行时框架和应用程序模块层。</p>
<p>实时操作系统(RTOS)：汽车迅速计算，短时间做出相应响应。RTOS是Ubuntu与Apollo内核几何；运行时框架：基于ROS框架进行运行，汽车各部分模块化后进行通信，针对Apollo，ROS进行了共享内存、去中心化和数据兼容性的修正。应用程序模块层包含MAP Engine/Localization/Perception/Planning/Control/HMI/End-to-End等软件模块。</p>
<h1 id="高精度地图"><a href="#高精度地图" class="headerlink" title="高精度地图"></a>高精度地图</h1><p>作用：辅助定位：车辆通过传感器获得数据，预处理后进行数据融合，将其与高精度地图上标志物进行对比，确定标志物位置进而确定车辆位置；辅助感知：提前获得交通标志位置，缩小检测范围，提高定位精度，即找到停车地点，即ROI（感兴趣区域）；辅助规划：辅助识别车辆中心线；辅助进行速度规划、行为规划。</p>
<p>高精度地图包括交通标志、障碍、建筑物等，能够有效减小计算负担。高精度地图的关键在于精度，因此需要及时更新，随时构建。构建过程分为五步：数据收集、数据处理、对象检测、手动验证和地图发布。</p>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>一般而言的GPS定位系统，精度在1~3米之间，其精度远远不能满足无人驾驶车辆的需求。同时，当周围环境比较复杂，如隧道城市情况下，GPS精度会下降。因此为了实现定位，需要将传感器检测地标与高精度地图地标进行对比，同时必须能够完成车辆自身坐标系与地图坐标系的转换。</p>
<p><img src="/2020/03/22/apollo-1/GlobaltoCarmap.jpg" alt="GlobaltoCarmap"></p>
<p>实现无人驾驶车辆定位有很多种方式，包括GNSS RTK/惯性导航/LiDAR定位/视觉定位。</p>
<p>GNSS RTK：GPS通过三角测量实现位置确定。GPS包括三部分：卫星（发射信号）+控制站（验证精度）+GPS接收器。为了缩小时间误差，提高定位精度，可以使用实时定位系统（RTK），通过计算自身实际位置与GPS计算位置之间的误差，并将该误差传递给接收器。GNSS RTK可以实现高精确度，但是城市/隧道环境下精度低，GPS信号刷新慢。</p>
<p>惯性导航：借助于车辆速度与行驶时间计算车辆运行距离，在拥有初始位置、速度和加速度的条件下可以获得车辆位置。加速度借助于加速度计进行测量，获得车辆坐标系下加速度。陀螺仪实现车辆坐标系与全局坐标系转换。IMU就是由加速度计和陀螺仪组成，IMU更新速度快，但是随时间会累积误差。</p>
<p>GPS加IMU实现了精确度高和更新速度快两大优点，但是对于长隧道，依旧不够。</p>
<p>激光雷达定位：传感器数据与高精度地图点云匹配进行定位。迭代最近法/滤波算法（SSD）/卡尔曼滤波，实现车辆坐标与全局坐标转换。</p>
<p>优点在于稳健性，但难以构建最新的高精度地图。</p>
<p>视觉定位：图像便宜但是定位困难，缺乏三维信息，对三维地图十分依赖。因此需要将图像与地图数据结合进行定位。粒子滤波原理对车道线进行处理，概率框架内实现。</p>
<p>Apollo使用多传感器融合系统进行定位。</p>
<p><img src="/2020/03/22/apollo-1/localization.jpg" alt="localization"></p>
<h1 id="感知"><a href="#感知" class="headerlink" title="感知"></a>感知</h1><p>无人驾驶车辆感知的四个任务：</p>
<p>检测Detection：找出物体的位置；</p>
<p>分类Classification：明确对象种类，即对象是什么；</p>
<p>跟踪Tracking：随时间推移观察移动物体，包括行人、自行车和其他车辆；</p>
<p>语义分割Segmentation：将图中像素与语义类别进行匹配，如道路车辆天空</p>
<p><img src="/2020/03/22/apollo-1/perception.jpg" alt="perception"></p>
<p>计算机视觉处理流程：接受图像数据-图形预处理（裁剪旋转变色）-提取特征-分类模型</p>
<p>对于摄像头数据，一般将图形处理为像素矩阵进行处理。对灰度图像，图像数据矩阵包含为两维：Width和Height；对于彩色图像，图像数据矩阵为三维：Width/Height/Depth(RGB)</p>
<p>对于Lidar数据，返回点云数据，使用激光来进行测距。</p>
<h2 id="感知中的机器学习"><a href="#感知中的机器学习" class="headerlink" title="感知中的机器学习"></a>感知中的机器学习</h2><p>机器学习是训练计算机从数据中进行学习数据的一系列算法。有监督学习：使用有标签数据来进行；无监督学习：无标签数据；半监督学习：少量有标签，大量无标签。强化学习通过对正确行为进行及时奖励来促使车辆正确行驶。</p>
<p>神经网络的三步：前馈+误差测定+反向传播，单次传递无法实现效果，需要上千次传递</p>
<p>卷积神经网络(CNN)多用于感知任务，其有效保留了图像的空间信息，</p>
<h2 id="感知中的任务"><a href="#感知中的任务" class="headerlink" title="感知中的任务"></a>感知中的任务</h2><p>检测与分类：检测CNN确定位置，分类CNN实现图像分类，当然也可以使用单一CNN算法同时实现检测与分类，常用的CNN算法包括R-CNN/Fast R-CNN/Faster R-CNN/YOLO/SSD。</p>
<p>跟踪：追踪在检测失败时发挥作用，同时保留对象身份。跟踪的第一步就是确认对象身份，通过识别对象的多种特征与前一帧中对象特征进行匹配，确定位置后，可以根据当前速度来对下一帧对象进行预测。</p>
<p>语义分割：对每个像素进行分类，借助于全卷积网络FCN来实现。首先Encoder对图像特征进行识别与提取，之后Decoder对卷积后的信息进行解码，输出与原图像大小相同的分割后图像。</p>
<p>举例：对于车道线及动态物体，Apollo感知过程如下：</p>
<p><img src="/2020/03/22/apollo-1/yolo.jpg" alt></p>
<p>感知通常依赖于相机、激光雷达和毫米波雷达，三种传感器在执行感知各项工作中各有优劣，通过传感器融合综合三者优点。</p>
<p><img src="/2020/03/22/apollo-1/sensorfusion.jpg" alt="sensorfusion"></p>
<p>Apollo在融合激光雷达与毫米波雷达的数据时，使用卡尔曼滤波算法，实现预测与更新。</p>
<h1 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h1><p>预测要求实时性、准确性的要求。</p>
<p>常见的预测方式有两种：基于模型预测和数据驱动预测</p>
<p><img src="/2020/03/22/apollo-1/prediction_2style.jpg" alt="prediction_2style"></p>
<p>基于模型预测更加直观，它结合了人类世界的诸多规则，当检测到其他车辆或行人时，构建其下一步将会到达的状态模型，确定每个模型的概率可能，根据下一步观测数据更新对模型概率。数据驱动预测当拥有足够的数据时，其结果更加准确。</p>
<p>基于车道预测：Apollo提出了车道序列的概念来进行基于车道的车辆行为预测，预测过程更加关注车辆如何在各个区域之间转换，而不是在区域中的具体行为。将车辆的路线定义为车道序列的组合。这种方法有效将复杂的预测转换为简单的选择过程。</p>
<p><img src="/2020/03/22/apollo-1/laneseq.jpg" alt="laneseq"></p>
<p>递归神经网络是利用时间序列特征的预测方法。相比于传统神经网络，构建多层感知器MLP利用大量数据进行前馈，误差计算和反向传播,以此来不断更新权重。递归神经网络考虑时间序列，每个MLP的输入包括原始数据和前一感知器的结果。</p>
<p><img src="/2020/03/22/apollo-1/RNN.jpg" alt="RNN"></p>
<p>Apollo使用RNN来预测车道序列，计算概率最高的就是所预测的动态障碍物将走的路线，之后以此来进行障碍物的轨迹生成。对于动态障碍物的轨迹生成，确定车辆初始状态与最终状态后，一般采用多项式模型来进行拟合即可。</p>
<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>路径规划结合了高精度地图、定位和预测三者来完成。规划主要包含路径导航和轨迹规划两部分。路径导航更加侧重于实现从A点到B点，而轨迹规划侧重于生成舒适且可执行的轨迹路线，路线由一系列路径点定义，每个点拥有其关联速度与时间戳。</p>
<p>路径规划需要三个输入，包括地图(包含公路网信息和实时交通信息)、当前位置和目的地。路径规划的过程就是在地图上进行搜索的过程，将整个地图转化为Graph。规划中将路段抽象为节点，路段之间的转换抽象为节点连线。路径规划的过程实际上就是进行图搜索的过程。</p>
<p>A*算法是进行图搜索的有效算法。A*算法的核心公式为$f(n)=g(n)+h(n)$，其中$f(n)$为当前节点到达目标的代价，$g(n)$为当前已经耗费的路径代价，$h(n)$为未来将要耗费的路径代价。在网格图中应用A*算法十分方便，对于一般的道路场景，需要将其抽象为节点。</p>
<p><img src="/2020/03/22/apollo-1/Astar.jpg" alt="AStar"></p>
<p>路径规划只是从高层对车辆轨迹进行规划，但车辆并不能沿着此路线行走，需要更细化的轨迹Trajectory规划。</p>
<p>轨迹生成的目的是生成一系列车辆路径点定义的轨迹，每个车辆路径点包含四个信息，路径点的二维位置和时间戳，保证车辆在一定时间到达一定位置。同时，每个路径点还包含车辆速度信息。车辆轨迹拥有诸多限制，首先避免碰撞，轨迹足够舒适以及符合车辆运动学动力学。轨迹生成后需要对其进行评估，轨迹评估采用cost function来进行，对轨迹设置速度舒适性等惩罚项。</p>
<p>一般而言的位置坐标使用笛卡尔Cartesian坐标系来进行描述，但是在轨迹规划中，笛卡尔坐标系难以进行描述轨迹。因此采用Frenet坐标系。s轴表示纵轴，即Longitudinal Axis，表示车辆沿中心线行驶距离；d轴表示横轴，即Lateral Axis，表示车辆偏离中心线的距离。</p>
<p><img src="/2020/03/22/apollo-1/frenet.jpg" alt="frenet"></p>
<h2 id="路径-速度解耦规划"><a href="#路径-速度解耦规划" class="headerlink" title="路径-速度解耦规划"></a>路径-速度解耦规划</h2><p>基于Frenet坐标系，轨迹规划可以实现路径-速度解耦，分别进行路线规划和速度规划。首先路径规划生成一系列轨迹，借助于成本函数，完成路径轨迹的最优选择，之后进行速度规划，并非是进行单独一个点的速度规划，速度规划应该是最终获得一条速度曲线。</p>
<p>路径规划首先将道路离散为多个单元格，在每个单元格中随机采样，单元格之间点的连线形成轨迹，对大量轨迹计算成本函数，选择成本最优的轨迹路线。成本函数考虑项包含路径曲率、障碍物距离、偏离中心距离以及车辆压力。</p>
<p><img src="/2020/03/22/apollo-1/route.jpg" alt="route"></p>
<p>在进行路径规划之后完成速度规划，借助于S-T图设计速度曲线，S为位移，T为时间，S-T图曲线表示车辆在不同时间的位置，离散化后S-T图可以表示道路中的障碍物，表示该段时间内该段道路无法行驶。速度规划也就转变为了在s-t图中寻找更优的速度曲线。</p>
<p><img src="/2020/03/22/apollo-1/st-graph.jpg" alt="st"></p>
<p>路径-速度解耦规划的主要思想就是离散化。离散化虽然简化了规划的过程，但是生成的曲线并不光滑，不能够被车辆实际使用，因此需要进行二次规划Quadractic Programming，将路径和速度曲线进行平滑，用非线性曲线与线性曲线进行拟合。</p>
<h2 id="Lattice规划"><a href="#Lattice规划" class="headerlink" title="Lattice规划"></a>Lattice规划</h2><p>在路径规划中，使用Frenet坐标系和S-T图完成三个维度的规划，即横向、纵向和时间维度。路径-速度解耦规划实际是将规划转变为横向纵向+纵向时间两种。Lattice规划将三个维度分解为S-T轨迹和S-L轨迹，最后将两二维轨迹合并。</p>
<p><img src="/2020/03/22/apollo-1/sl_st.jpg" alt="sl-st"></p>
<p>对ST轨迹，车辆终止状态分为三种：</p>
<ul>
<li>巡航(速度定值，加速度为0)</li>
<li>跟车(速度加速度均有限制)</li>
<li>停止(速度加速度最终为0)</li>
</ul>
<p>对于SL规划，最终车辆应该与车辆中心线一致，车辆朝向和位置的一阶导数和二阶导数都应该为0。</p>
<p>当获得ST轨迹与SL轨迹后，需要将两轨迹转换到笛卡尔坐标系中，一般借助于S坐标进行匹配。</p>
<h1 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h1><p> 对于车辆而言，最基本的控制输入为转向、加速和制动三种。对控制器的要求，准确性、可行性和平稳度，控制的最终目标就是在一定的输入下，使得车辆轨迹与目标路径相差最小，并且保证舒适性。</p>
<p>控制器包含两个输入：目标轨迹和车辆状态。目标轨迹来自轨迹规划，每个路径点包含车辆的位置信息和速度信息。车辆状态包括车辆状态和加速转向制动信息。输出为车辆的加速转向和制动信息。</p>
<h2 id="PID-比例积分微分控制"><a href="#PID-比例积分微分控制" class="headerlink" title="PID- 比例积分微分控制"></a>PID- 比例积分微分控制</h2><p>P比例项随误差变大控制程度变大；D微分项保持轨迹稳定；I积分项惩罚固有偏差。</p>
<p>PID控制器最大优点在于简单，只需要知道与目标轨迹的偏差。缺点为其依赖于实时误差，延迟性对其影响较大。</p>
<h2 id="LQR-线性二次调节器"><a href="#LQR-线性二次调节器" class="headerlink" title="LQR-线性二次调节器"></a>LQR-线性二次调节器</h2><p>线性二次调节器Linear Quadratic Regulator被用于进行横向控制，包含四项：横向误差cte及变化率、朝向误差$\theta$及变化率。LQR中的L线性就是指，当x和u线性变化时，dx也会线性变化。</p>
<p><img src="/2020/03/22/apollo-1/LQR.jpg" alt="image-20200325232249075"></p>
<h2 id="MPC-模型预测控制"><a href="#MPC-模型预测控制" class="headerlink" title="MPC-模型预测控制"></a>MPC-模型预测控制</h2><p>十分依赖与数学优化。分为三步：</p>
<ul>
<li><p>建立车辆模型，类似于车辆的物理模型，其预测了将控制应用于其汽车会发生什么；</p>
</li>
<li><p>使用优化引擎中计算有限时间范围内的控制序列，优化引擎依赖于车辆模型的约束条件</p>
</li>
<li><p>使用第一组控制。</p>
</li>
</ul>
<p>MPC采用的是近似测量与计算，主要是进行序列重复计算来优化。MPC将控制过程中的模型、约束和成本函数合并，生成优化问题。其考虑了车辆模型，比PID更加准确，但是也比PID更加计算缓慢。</p>
<h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>从此启航！！！</p>
]]></content>
      <categories>
        <category>自动驾驶</category>
      </categories>
      <tags>
        <tag>自动驾驶</tag>
        <tag>Apollo</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;一&gt; 贝叶斯定理是什么？</title>
    <url>/2020/03/19/bayes/</url>
    <content><![CDATA[<p>工大两年研究生期间，看的、听得最多的词就是贝叶斯<em>Bayes</em>了。2019年元旦零点时，发了条朋友圈——<em>2018-2019，贝叶斯陪我跨年</em>。当时虽然只是在准备人工智能原理的考试，但是也确实没有想到，贝叶斯<em>Bayes</em>这个词竟然贯穿了我的研究生生涯。虽然有很多博主有关贝叶斯的文章都珠玉在前，但是因为领域的原因，所有人的也都不恰恰是我想要的。我脑海中关于贝叶斯<em>Bayes</em>的知识拼图的建构，也是看了很多来源的文章才慢慢形成的。因此虽然有这么多珠玉在前的文章，但我依旧还是想从我的角度、从我的理解来解释：贝叶斯到底是什么？</p>
<a id="more"></a>

<h1 id="贝叶斯定理是什么"><a href="#贝叶斯定理是什么" class="headerlink" title="贝叶斯定理是什么"></a>贝叶斯定理是什么</h1><p>首先上公式：<br>$$<br>P(x|y)=\frac{P(x)P(y|x)}{P(y)}<br>$$<br>其中，$P(x)$是先验概率，$P(y|x)$是似然概率，$P(x|y)$是后验概率，也可以说是条件概率，$P(y)$是归一化常数。</p>
<p>关于贝叶斯定理如何被发现的就不再赘述，这个公式看似反直觉，但是贝叶斯体系中的所有理论其实都是由这个公式发展而来。基于此，这整个概率体系甚至分为了经典概率学派和贝叶斯学派，其区别关键就在于对于概率的认识，经典学派认为，概率就是概率，其就像 $1+1=2$ 那样确定，是由大量统计出来的，由频数和频率来确定的。但是贝叶斯学派并不如此认为，贝叶斯学派认为概率是不可完美确定的。贝叶斯学派最重要的发明就是先验概率，它表示一个概率事件在不受外界干扰下的不确定性表述，或者说是可能性。后验概率表示当一个事件在受到外界干扰时的不确定性表述。两者之间的转化依靠的是似然概率$P(y|x)$，他是在已知概率事件 $x$ 的条件下，外部干扰事件 $y$ 实际发生的情况。</p>
<p>拿最常见疾病检测案例来举例。</p>
<p>已知一个疾病在人群中患病概率为 0.1% ，记事件 $H$ ,而疾病检测的正确率为 99% ，如果你被检测为阳性，记事件为 $E$ ，那么真的患病的概率是多少，是 99%么？实际上并非如此，由于疾病本身在人群中患病的足够低，实际真正患病的概率十分低。来计算一下：<br>$$<br>P(H|E) = \frac{P(H)P(E|H)}{P(E)}\<br>       = \frac{P(H)P(E|H)}{P(H)P(E|H)+P(-H)P(E|-H)}<br>$$</p>
<blockquote>
<p>$P(H|E)$ 表示在已知检测阳性的条件下，病人真正患病的概率，也就是要求的目标</p>
<p>$P(H)$ 表示人们患病这一事件本身的先验概率，也就是题目中的 0.1%</p>
<p>$P(E|H)$ 表示人们在已经患病的情况下，检测呈阳性的概率，即99%​</p>
<p>$P(E)$ 表示人们检测呈阳性的概率，包含患病条件下呈阳性和未患病情况下呈阳性(简化为1%)之和</p>
</blockquote>
<p>$$<br>P(H|E)=\frac{0.1\cdot99}{99\cdot99+99.9\cdot1}=0.09<br>$$</p>
<p>是的，你患病的概率就是9%，概率十分低。OK，继续计算，如果你去复诊，依旧是阳性，那确实患病的概率是多少呢？因为已经有一次阳性了，所以先验概率更新为前一次计算的后验概率 9%。<br>$$<br>P(H|E)=\frac{9\cdot99}{9\cdot99+91\cdot1}=0.907<br>$$<br>患病的概率提升为90.7%​，患病的几率急速上升。也就是说，同样一个问题下，随着我们获取先验概率多少的不同，对于同一个事件，我们的认知水平也会不同。</p>
<p>其次，还有著名的<em>蒙特利尔三门问题</em>，简述就是有$A/B/C$三扇门，已知一门后肯定有奖品，<em>主持人事先知道奖品位置</em>，当选手选中一扇门B后，主持人打开另两扇门中没奖品的一扇门A，问选手是否选择更换选择？直接说结果，应该换。此时门B中奖概率为$1/3$，门C中奖概率为$2/3$。具体推导可以查询相关文章。</p>
<p>上述例子表明了，直觉产生概率与真实情况存在差别，而贝叶斯网络之所以会产生这种反直觉的情况，也就是因为考虑了先验概率。当事件本身的先验概率很低时，在外界干扰下产生的后验概率也会很低。随着我们认知先验水平的不同，对事物的认识也会不同。</p>
<p>从这个很有意思的数学现象，也可以随之推理到我们的生活中，对一件事物的认知，我们也总是随着了解信息的增多而在动态改变，这也正是贝叶斯定理所传递的先验知识的概念。</p>
<h1 id="为什么要用贝叶斯定理"><a href="#为什么要用贝叶斯定理" class="headerlink" title="为什么要用贝叶斯定理"></a>为什么要用贝叶斯定理</h1><p>以上对贝叶斯定理形成了整体概念，接下来从领域角度来认识它。贝叶斯定理用在了什么领域，为什么要用它？</p>
<h1 id="怎么用贝叶斯定理"><a href="#怎么用贝叶斯定理" class="headerlink" title="怎么用贝叶斯定理"></a>怎么用贝叶斯定理</h1>]]></content>
      <categories>
        <category>模式识别</category>
      </categories>
      <tags>
        <tag>模式识别</tag>
        <tag>贝叶斯定理</tag>
      </tags>
  </entry>
  <entry>
    <title>一切都要从一只蝙蝠说起......</title>
    <url>/2020/03/18/firstblog/</url>
    <content><![CDATA[<p>为什么要写博客Blog? 一切的一切还要从2020年的一只蝙蝠说起$\cdots \cdots$</p>
<a id="more"></a>

<img src="/2020/03/18/firstblog/batman.jpg" alt="Batman" style="zoom:50%;">

<p>放错图了，应该是这个</p>
<p><img src="/2020/03/18/firstblog/bat.jpg" alt="Bat"></p>
<p>哈哈，抖个机灵。</p>
<p>其实，搭网站写博客这个念头也确实在脑海中盘桓了很长时间了，但一直在校醉心于<del>科研</del>摸鱼的我也是苦于没有时间，如今禁足在家，一没环境，二没条件，进度不畅之下一直在搞毕设也难免烦躁，搭网站做博客的念头也随之而起了。幸而有之前做网站送女朋友生日礼物的经验，买域名搭网站选主题改配置，两天时间也就一气呵成了。</p>
<p>网站做好了，总是要写些什么，思来想去第一篇随笔不如写写为什么要做Blog？</p>
<p>说来原因也简单，一为好玩，二为记录，<del>三为交流（估计也没人看）</del>。</p>
<p>一为<strong>好玩</strong>，一切事物的最大驱动力。</p>
<p>最近<em>求之不得，反求诸己</em> 被外交方言人带火了，虽然没有什么求之不得的事情，但是反求诸己来说，宅家期间，让我对任何事物都很淡漠，很难有说让我汲汲于此的事情，而这恰恰是一件。其实或许也是因为科研的枯燥，这个恰恰能够迅速带来反馈和满足。</p>
<p>二为<strong>记录</strong>，自我提升的捷径。</p>
<p>盘点我马上过去的两年研究生生活，在工大学习了很多，如果单纯罗列接触过的知识来说，<em>人工智能<em>、</em>神经网络<em>、</em>机器人原理<em>、</em>控制理论<em>、</em>贝叶斯定理<em>、</em>高斯模型<em>、</em>自动驾驶<em>、</em>决策规划<em>、</em>感知控制<em>、</em>ROS<em>、</em>Tensorflow</em> 等等，似乎是学到了很多新知识，但又好像是没有。如今反思，知识上的似是而非是因为没有能够形成闭环，学习到的很多知识，往往都是不求甚解，没有及时的输出，就会似懂非懂。我不是一个擅长一针见血提出问题的人，相比于此，我更倾向于应用过程中慢慢发现问题，再回头去看去解决。因此，一个输出的平台也就迫在眉睫，在输出自己学习到的知识的同时，梳理其中的脉络，进行自我提升。拒绝做掰棒子的狗熊！！！</p>
<p>我很喜欢拼图。每一块拼图都应该在属于他自己的位置上，所有拼图一起构成整个图案。学习的过程就是在拼图，每个人的知识体系就是一个完整的图案，学习到的知识是一块小的拼图，梳理脉络的过程也就是在找到拼图他自己应该在的位置。</p>
<p>最后，送上网站结构树。</p>
<ul>
<li>Self-Driving Study<ul>
<li>随笔—记录生活，记录些想说的</li>
<li>刷题—生命不息，刷题不止</li>
<li>网站—记录下网站的成长</li>
<li>模式识别—哈哈，虽然叫的大，但其实主要也就是记录研究生期间学习的贝叶斯定理和采样<ul>
<li>贝叶斯定理</li>
<li>高斯模型</li>
<li>MC采样</li>
</ul>
</li>
<li>自动驾驶—主力内容，加油吧，小菜鸟！！！<ul>
<li>ROS</li>
<li>Apollo</li>
<li>Docker</li>
<li>决策规划</li>
<li>感知</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
